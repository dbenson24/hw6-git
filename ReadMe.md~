# ReadMe for COMP 15 HW6
## Song Search 
### Derek Benson

This program is titled Song Search. It is designed to process a database
of song lyrics that is stored in a text file. Each song is seperated by
a <BREAK> marker and the first two entries of the song are its title and
artist. After processing the database the program will search for the 
alpha only version of any words typed into it. Entering <BREAK> will 
cause the program to terminate.

main.cpp 

hashfunc.cpp 
    Defines the hashfunc class. Used to hash a string.

hashfunc.h 
    This is the header file for the hashfunc class. It declares
    all of the methods and variables defined in hashfunc.cpp.

SongNode.cpp 
    Defines the SongNode class. Used to store all of the lyrics,
    the artist, and the title of a song.

SongNode.h 
    This is the header file for the SongNode class. It declares
    all of the methods and variables defined in SongNode.cpp.

SongTable.cpp 
    Defines the SongTable class. Used to store each individual
    song into a dynamic array.

SongTable.h 
    This is the header file for the SongTable class. It declares
    all of the methods and variables defined in SongTable.cpp.

WordList.cpp 
    Defines the WordList class. Used to create a WordList that
    consists of a hashtable, wordTable, and a dynamic array of
    songs, songTable.

WordList.h 
    This is the header file for the WordList class. It declares
    all of the methods and variables defined in WordList.cpp.

WordNode.cpp 
    Defines the WordNode class. Used to store all of the information
    needed for a word's appearance in a specific song.

WordNode.h 
    This is the header file for the WordNode class. It declares
    all of the methods and variables defined in WordNode.cpp.

WordTable.cpp 
    Defines the sort2 class. Used to perform a shell sort on an
    arraywithlength.

WordTable.h
    This is the header file for the sort2 class. It declares
    all of the methods and variables defined in sort2.cpp.

Every assignment you submit you will include a ReadMe file. The name
could be ReadMe, readme, Read-me.txt, readME, ReadMe.md (the “.md”
stands for “markdown,” which allows lightweight formatting) or almost
anything you like that has the word read followed by the word me. Exact
spelling is not important, the contents are.

The purpose of the ReadMe file is the same as the little paper insert
you get in a new appliance -- to give the reader an introduction and
overview of the product.

Your ReadMe file for the assignments **must** include:

1.  The purpose of your program

2.  List of files with one/or two-line summary

3.  How to compile it (saying "use included Makefile" is ok)

4.  Outline of data structure (depending on the assignment)

5.  Outline of algorithm (depending on the assignment)

6.  A list of people who materially helped you on the assignment. If
    you worked with a friend and you shared ideas, you need to 
    list that person, e.g., "Josh Whedon helped me on this assignment".
    You do not need to list TAs, or professors, but you may feel free
    to do so.

The ReadMe file shows the reader, in a quick glance, what the program is
about and gives a general idea of how it works. For short programs the
readme file will be short, for more complicated programs the readme file
will be longer.

Use outline form rather than long discursive paragraphs. A ReadMe file
is an overview.

There is no correct readme format; within these guidelines, devise your
own style.

